// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: newsfeed_messages.proto

#ifndef PROTOBUF_newsfeed_5fmessages_2eproto__INCLUDED
#define PROTOBUF_newsfeed_5fmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace newsfeed {
namespace proto {
class news;
class newsDefaultTypeInternal;
extern newsDefaultTypeInternal _news_default_instance_;
class post_news_request;
class post_news_requestDefaultTypeInternal;
extern post_news_requestDefaultTypeInternal _post_news_request_default_instance_;
class post_news_response;
class post_news_responseDefaultTypeInternal;
extern post_news_responseDefaultTypeInternal _post_news_response_default_instance_;
class register_request;
class register_requestDefaultTypeInternal;
extern register_requestDefaultTypeInternal _register_request_default_instance_;
class register_response;
class register_responseDefaultTypeInternal;
extern register_responseDefaultTypeInternal _register_response_default_instance_;
class req_envelope;
class req_envelopeDefaultTypeInternal;
extern req_envelopeDefaultTypeInternal _req_envelope_default_instance_;
class topic_request;
class topic_requestDefaultTypeInternal;
extern topic_requestDefaultTypeInternal _topic_request_default_instance_;
class topic_response;
class topic_responseDefaultTypeInternal;
extern topic_responseDefaultTypeInternal _topic_response_default_instance_;
}  // namespace proto
}  // namespace newsfeed

namespace newsfeed {
namespace proto {

namespace protobuf_newsfeed_5fmessages_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_newsfeed_5fmessages_2eproto

enum req_envelope_msg_type {
  req_envelope_msg_type_register_request_t = 1,
  req_envelope_msg_type_register_response_t = 2,
  req_envelope_msg_type_topic_request_t = 3,
  req_envelope_msg_type_topic_response_t = 4,
  req_envelope_msg_type_post_news_request_t = 5,
  req_envelope_msg_type_post_news_response_t = 6,
  req_envelope_msg_type_news_t = 7
};
bool req_envelope_msg_type_IsValid(int value);
const req_envelope_msg_type req_envelope_msg_type_msg_type_MIN = req_envelope_msg_type_register_request_t;
const req_envelope_msg_type req_envelope_msg_type_msg_type_MAX = req_envelope_msg_type_news_t;
const int req_envelope_msg_type_msg_type_ARRAYSIZE = req_envelope_msg_type_msg_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* req_envelope_msg_type_descriptor();
inline const ::std::string& req_envelope_msg_type_Name(req_envelope_msg_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    req_envelope_msg_type_descriptor(), value);
}
inline bool req_envelope_msg_type_Parse(
    const ::std::string& name, req_envelope_msg_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<req_envelope_msg_type>(
    req_envelope_msg_type_descriptor(), name, value);
}
enum topic_action_t {
  subscribe = 1,
  unsubscribe = 2
};
bool topic_action_t_IsValid(int value);
const topic_action_t topic_action_t_MIN = subscribe;
const topic_action_t topic_action_t_MAX = unsubscribe;
const int topic_action_t_ARRAYSIZE = topic_action_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* topic_action_t_descriptor();
inline const ::std::string& topic_action_t_Name(topic_action_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    topic_action_t_descriptor(), value);
}
inline bool topic_action_t_Parse(
    const ::std::string& name, topic_action_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<topic_action_t>(
    topic_action_t_descriptor(), name, value);
}
enum global_error_t {
  ok = 1,
  not_registered = 2,
  internal = 3
};
bool global_error_t_IsValid(int value);
const global_error_t global_error_t_MIN = ok;
const global_error_t global_error_t_MAX = internal;
const int global_error_t_ARRAYSIZE = global_error_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* global_error_t_descriptor();
inline const ::std::string& global_error_t_Name(global_error_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    global_error_t_descriptor(), value);
}
inline bool global_error_t_Parse(
    const ::std::string& name, global_error_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<global_error_t>(
    global_error_t_descriptor(), name, value);
}
// ===================================================================

class register_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:newsfeed.proto.register_request) */ {
 public:
  register_request();
  virtual ~register_request();

  register_request(const register_request& from);

  inline register_request& operator=(const register_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  register_request(register_request&& from) noexcept
    : register_request() {
    *this = ::std::move(from);
  }

  inline register_request& operator=(register_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const register_request& default_instance();

  static inline const register_request* internal_default_instance() {
    return reinterpret_cast<const register_request*>(
               &_register_request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(register_request* other);
  friend void swap(register_request& a, register_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline register_request* New() const PROTOBUF_FINAL { return New(NULL); }

  register_request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const register_request& from);
  void MergeFrom(const register_request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(register_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:newsfeed.proto.register_request)
 private:
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  friend struct protobuf_newsfeed_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class register_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:newsfeed.proto.register_response) */ {
 public:
  register_response();
  virtual ~register_response();

  register_response(const register_response& from);

  inline register_response& operator=(const register_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  register_response(register_response&& from) noexcept
    : register_response() {
    *this = ::std::move(from);
  }

  inline register_response& operator=(register_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const register_response& default_instance();

  static inline const register_response* internal_default_instance() {
    return reinterpret_cast<const register_response*>(
               &_register_response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(register_response* other);
  friend void swap(register_response& a, register_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline register_response* New() const PROTOBUF_FINAL { return New(NULL); }

  register_response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const register_response& from);
  void MergeFrom(const register_response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(register_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string topic = 2;
  bool has_topic() const;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // required .newsfeed.proto.global_error_t error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::newsfeed::proto::global_error_t error() const;
  void set_error(::newsfeed::proto::global_error_t value);

  // @@protoc_insertion_point(class_scope:newsfeed.proto.register_response)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_topic();
  void clear_has_topic();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  int error_;
  friend struct protobuf_newsfeed_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class topic_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:newsfeed.proto.topic_request) */ {
 public:
  topic_request();
  virtual ~topic_request();

  topic_request(const topic_request& from);

  inline topic_request& operator=(const topic_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  topic_request(topic_request&& from) noexcept
    : topic_request() {
    *this = ::std::move(from);
  }

  inline topic_request& operator=(topic_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const topic_request& default_instance();

  static inline const topic_request* internal_default_instance() {
    return reinterpret_cast<const topic_request*>(
               &_topic_request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(topic_request* other);
  friend void swap(topic_request& a, topic_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline topic_request* New() const PROTOBUF_FINAL { return New(NULL); }

  topic_request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const topic_request& from);
  void MergeFrom(const topic_request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(topic_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string topic = 2;
  bool has_topic() const;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // required .newsfeed.proto.topic_action_t action = 1;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 1;
  ::newsfeed::proto::topic_action_t action() const;
  void set_action(::newsfeed::proto::topic_action_t value);

  // @@protoc_insertion_point(class_scope:newsfeed.proto.topic_request)
 private:
  void set_has_action();
  void clear_has_action();
  void set_has_topic();
  void clear_has_topic();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  int action_;
  friend struct protobuf_newsfeed_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class topic_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:newsfeed.proto.topic_response) */ {
 public:
  topic_response();
  virtual ~topic_response();

  topic_response(const topic_response& from);

  inline topic_response& operator=(const topic_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  topic_response(topic_response&& from) noexcept
    : topic_response() {
    *this = ::std::move(from);
  }

  inline topic_response& operator=(topic_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const topic_response& default_instance();

  static inline const topic_response* internal_default_instance() {
    return reinterpret_cast<const topic_response*>(
               &_topic_response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(topic_response* other);
  friend void swap(topic_response& a, topic_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline topic_response* New() const PROTOBUF_FINAL { return New(NULL); }

  topic_response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const topic_response& from);
  void MergeFrom(const topic_response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(topic_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .newsfeed.proto.topic_action_t action = 1;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 1;
  ::newsfeed::proto::topic_action_t action() const;
  void set_action(::newsfeed::proto::topic_action_t value);

  // required .newsfeed.proto.global_error_t error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  ::newsfeed::proto::global_error_t error() const;
  void set_error(::newsfeed::proto::global_error_t value);

  // @@protoc_insertion_point(class_scope:newsfeed.proto.topic_response)
 private:
  void set_has_action();
  void clear_has_action();
  void set_has_error();
  void clear_has_error();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int action_;
  int error_;
  friend struct protobuf_newsfeed_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class post_news_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:newsfeed.proto.post_news_request) */ {
 public:
  post_news_request();
  virtual ~post_news_request();

  post_news_request(const post_news_request& from);

  inline post_news_request& operator=(const post_news_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  post_news_request(post_news_request&& from) noexcept
    : post_news_request() {
    *this = ::std::move(from);
  }

  inline post_news_request& operator=(post_news_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const post_news_request& default_instance();

  static inline const post_news_request* internal_default_instance() {
    return reinterpret_cast<const post_news_request*>(
               &_post_news_request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(post_news_request* other);
  friend void swap(post_news_request& a, post_news_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline post_news_request* New() const PROTOBUF_FINAL { return New(NULL); }

  post_news_request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const post_news_request& from);
  void MergeFrom(const post_news_request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(post_news_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string news = 1;
  bool has_news() const;
  void clear_news();
  static const int kNewsFieldNumber = 1;
  const ::std::string& news() const;
  void set_news(const ::std::string& value);
  #if LANG_CXX11
  void set_news(::std::string&& value);
  #endif
  void set_news(const char* value);
  void set_news(const char* value, size_t size);
  ::std::string* mutable_news();
  ::std::string* release_news();
  void set_allocated_news(::std::string* news);

  // @@protoc_insertion_point(class_scope:newsfeed.proto.post_news_request)
 private:
  void set_has_news();
  void clear_has_news();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr news_;
  friend struct protobuf_newsfeed_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class post_news_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:newsfeed.proto.post_news_response) */ {
 public:
  post_news_response();
  virtual ~post_news_response();

  post_news_response(const post_news_response& from);

  inline post_news_response& operator=(const post_news_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  post_news_response(post_news_response&& from) noexcept
    : post_news_response() {
    *this = ::std::move(from);
  }

  inline post_news_response& operator=(post_news_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const post_news_response& default_instance();

  static inline const post_news_response* internal_default_instance() {
    return reinterpret_cast<const post_news_response*>(
               &_post_news_response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(post_news_response* other);
  friend void swap(post_news_response& a, post_news_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline post_news_response* New() const PROTOBUF_FINAL { return New(NULL); }

  post_news_response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const post_news_response& from);
  void MergeFrom(const post_news_response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(post_news_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .newsfeed.proto.global_error_t error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::newsfeed::proto::global_error_t error() const;
  void set_error(::newsfeed::proto::global_error_t value);

  // @@protoc_insertion_point(class_scope:newsfeed.proto.post_news_response)
 private:
  void set_has_error();
  void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int error_;
  friend struct protobuf_newsfeed_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class news : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:newsfeed.proto.news) */ {
 public:
  news();
  virtual ~news();

  news(const news& from);

  inline news& operator=(const news& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  news(news&& from) noexcept
    : news() {
    *this = ::std::move(from);
  }

  inline news& operator=(news&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const news& default_instance();

  static inline const news* internal_default_instance() {
    return reinterpret_cast<const news*>(
               &_news_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(news* other);
  friend void swap(news& a, news& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline news* New() const PROTOBUF_FINAL { return New(NULL); }

  news* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const news& from);
  void MergeFrom(const news& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(news* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:newsfeed.proto.news)
 private:
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  friend struct protobuf_newsfeed_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_envelope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:newsfeed.proto.req_envelope) */ {
 public:
  req_envelope();
  virtual ~req_envelope();

  req_envelope(const req_envelope& from);

  inline req_envelope& operator=(const req_envelope& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_envelope(req_envelope&& from) noexcept
    : req_envelope() {
    *this = ::std::move(from);
  }

  inline req_envelope& operator=(req_envelope&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const req_envelope& default_instance();

  static inline const req_envelope* internal_default_instance() {
    return reinterpret_cast<const req_envelope*>(
               &_req_envelope_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(req_envelope* other);
  friend void swap(req_envelope& a, req_envelope& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_envelope* New() const PROTOBUF_FINAL { return New(NULL); }

  req_envelope* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const req_envelope& from);
  void MergeFrom(const req_envelope& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(req_envelope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef req_envelope_msg_type msg_type;
  static const msg_type register_request_t =
    req_envelope_msg_type_register_request_t;
  static const msg_type register_response_t =
    req_envelope_msg_type_register_response_t;
  static const msg_type topic_request_t =
    req_envelope_msg_type_topic_request_t;
  static const msg_type topic_response_t =
    req_envelope_msg_type_topic_response_t;
  static const msg_type post_news_request_t =
    req_envelope_msg_type_post_news_request_t;
  static const msg_type post_news_response_t =
    req_envelope_msg_type_post_news_response_t;
  static const msg_type news_t =
    req_envelope_msg_type_news_t;
  static inline bool msg_type_IsValid(int value) {
    return req_envelope_msg_type_IsValid(value);
  }
  static const msg_type msg_type_MIN =
    req_envelope_msg_type_msg_type_MIN;
  static const msg_type msg_type_MAX =
    req_envelope_msg_type_msg_type_MAX;
  static const int msg_type_ARRAYSIZE =
    req_envelope_msg_type_msg_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_type_descriptor() {
    return req_envelope_msg_type_descriptor();
  }
  static inline const ::std::string& msg_type_Name(msg_type value) {
    return req_envelope_msg_type_Name(value);
  }
  static inline bool msg_type_Parse(const ::std::string& name,
      msg_type* value) {
    return req_envelope_msg_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .newsfeed.proto.register_request reg_req = 2;
  bool has_reg_req() const;
  void clear_reg_req();
  static const int kRegReqFieldNumber = 2;
  const ::newsfeed::proto::register_request& reg_req() const;
  ::newsfeed::proto::register_request* mutable_reg_req();
  ::newsfeed::proto::register_request* release_reg_req();
  void set_allocated_reg_req(::newsfeed::proto::register_request* reg_req);

  // optional .newsfeed.proto.register_response reg_resp = 3;
  bool has_reg_resp() const;
  void clear_reg_resp();
  static const int kRegRespFieldNumber = 3;
  const ::newsfeed::proto::register_response& reg_resp() const;
  ::newsfeed::proto::register_response* mutable_reg_resp();
  ::newsfeed::proto::register_response* release_reg_resp();
  void set_allocated_reg_resp(::newsfeed::proto::register_response* reg_resp);

  // optional .newsfeed.proto.topic_request topic_req = 4;
  bool has_topic_req() const;
  void clear_topic_req();
  static const int kTopicReqFieldNumber = 4;
  const ::newsfeed::proto::topic_request& topic_req() const;
  ::newsfeed::proto::topic_request* mutable_topic_req();
  ::newsfeed::proto::topic_request* release_topic_req();
  void set_allocated_topic_req(::newsfeed::proto::topic_request* topic_req);

  // optional .newsfeed.proto.topic_response topic_resp = 5;
  bool has_topic_resp() const;
  void clear_topic_resp();
  static const int kTopicRespFieldNumber = 5;
  const ::newsfeed::proto::topic_response& topic_resp() const;
  ::newsfeed::proto::topic_response* mutable_topic_resp();
  ::newsfeed::proto::topic_response* release_topic_resp();
  void set_allocated_topic_resp(::newsfeed::proto::topic_response* topic_resp);

  // optional .newsfeed.proto.post_news_request post_req = 6;
  bool has_post_req() const;
  void clear_post_req();
  static const int kPostReqFieldNumber = 6;
  const ::newsfeed::proto::post_news_request& post_req() const;
  ::newsfeed::proto::post_news_request* mutable_post_req();
  ::newsfeed::proto::post_news_request* release_post_req();
  void set_allocated_post_req(::newsfeed::proto::post_news_request* post_req);

  // optional .newsfeed.proto.post_news_response post_resp = 7;
  bool has_post_resp() const;
  void clear_post_resp();
  static const int kPostRespFieldNumber = 7;
  const ::newsfeed::proto::post_news_response& post_resp() const;
  ::newsfeed::proto::post_news_response* mutable_post_resp();
  ::newsfeed::proto::post_news_response* release_post_resp();
  void set_allocated_post_resp(::newsfeed::proto::post_news_response* post_resp);

  // optional .newsfeed.proto.news news_data = 8;
  bool has_news_data() const;
  void clear_news_data();
  static const int kNewsDataFieldNumber = 8;
  const ::newsfeed::proto::news& news_data() const;
  ::newsfeed::proto::news* mutable_news_data();
  ::newsfeed::proto::news* release_news_data();
  void set_allocated_news_data(::newsfeed::proto::news* news_data);

  // required .newsfeed.proto.req_envelope.msg_type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::newsfeed::proto::req_envelope_msg_type type() const;
  void set_type(::newsfeed::proto::req_envelope_msg_type value);

  // @@protoc_insertion_point(class_scope:newsfeed.proto.req_envelope)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_reg_req();
  void clear_has_reg_req();
  void set_has_reg_resp();
  void clear_has_reg_resp();
  void set_has_topic_req();
  void clear_has_topic_req();
  void set_has_topic_resp();
  void clear_has_topic_resp();
  void set_has_post_req();
  void clear_has_post_req();
  void set_has_post_resp();
  void clear_has_post_resp();
  void set_has_news_data();
  void clear_has_news_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::newsfeed::proto::register_request* reg_req_;
  ::newsfeed::proto::register_response* reg_resp_;
  ::newsfeed::proto::topic_request* topic_req_;
  ::newsfeed::proto::topic_response* topic_resp_;
  ::newsfeed::proto::post_news_request* post_req_;
  ::newsfeed::proto::post_news_response* post_resp_;
  ::newsfeed::proto::news* news_data_;
  int type_;
  friend struct protobuf_newsfeed_5fmessages_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// register_request

// required string userid = 1;
inline bool register_request::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void register_request::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void register_request::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void register_request::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& register_request::userid() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.register_request.userid)
  return userid_.GetNoArena();
}
inline void register_request::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:newsfeed.proto.register_request.userid)
}
#if LANG_CXX11
inline void register_request::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:newsfeed.proto.register_request.userid)
}
#endif
inline void register_request::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:newsfeed.proto.register_request.userid)
}
inline void register_request::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:newsfeed.proto.register_request.userid)
}
inline ::std::string* register_request::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.register_request.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* register_request::release_userid() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.register_request.userid)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void register_request::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.register_request.userid)
}

// -------------------------------------------------------------------

// register_response

// required .newsfeed.proto.global_error_t error = 1;
inline bool register_response::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void register_response::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void register_response::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void register_response::clear_error() {
  error_ = 1;
  clear_has_error();
}
inline ::newsfeed::proto::global_error_t register_response::error() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.register_response.error)
  return static_cast< ::newsfeed::proto::global_error_t >(error_);
}
inline void register_response::set_error(::newsfeed::proto::global_error_t value) {
  assert(::newsfeed::proto::global_error_t_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:newsfeed.proto.register_response.error)
}

// optional string topic = 2;
inline bool register_response::has_topic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void register_response::set_has_topic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void register_response::clear_has_topic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void register_response::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topic();
}
inline const ::std::string& register_response::topic() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.register_response.topic)
  return topic_.GetNoArena();
}
inline void register_response::set_topic(const ::std::string& value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:newsfeed.proto.register_response.topic)
}
#if LANG_CXX11
inline void register_response::set_topic(::std::string&& value) {
  set_has_topic();
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:newsfeed.proto.register_response.topic)
}
#endif
inline void register_response::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:newsfeed.proto.register_response.topic)
}
inline void register_response::set_topic(const char* value, size_t size) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:newsfeed.proto.register_response.topic)
}
inline ::std::string* register_response::mutable_topic() {
  set_has_topic();
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.register_response.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* register_response::release_topic() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.register_response.topic)
  clear_has_topic();
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void register_response::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.register_response.topic)
}

// -------------------------------------------------------------------

// topic_request

// required .newsfeed.proto.topic_action_t action = 1;
inline bool topic_request::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void topic_request::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void topic_request::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void topic_request::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::newsfeed::proto::topic_action_t topic_request::action() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.topic_request.action)
  return static_cast< ::newsfeed::proto::topic_action_t >(action_);
}
inline void topic_request::set_action(::newsfeed::proto::topic_action_t value) {
  assert(::newsfeed::proto::topic_action_t_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:newsfeed.proto.topic_request.action)
}

// required string topic = 2;
inline bool topic_request::has_topic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void topic_request::set_has_topic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void topic_request::clear_has_topic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void topic_request::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topic();
}
inline const ::std::string& topic_request::topic() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.topic_request.topic)
  return topic_.GetNoArena();
}
inline void topic_request::set_topic(const ::std::string& value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:newsfeed.proto.topic_request.topic)
}
#if LANG_CXX11
inline void topic_request::set_topic(::std::string&& value) {
  set_has_topic();
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:newsfeed.proto.topic_request.topic)
}
#endif
inline void topic_request::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:newsfeed.proto.topic_request.topic)
}
inline void topic_request::set_topic(const char* value, size_t size) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:newsfeed.proto.topic_request.topic)
}
inline ::std::string* topic_request::mutable_topic() {
  set_has_topic();
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.topic_request.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* topic_request::release_topic() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.topic_request.topic)
  clear_has_topic();
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void topic_request::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.topic_request.topic)
}

// -------------------------------------------------------------------

// topic_response

// required .newsfeed.proto.topic_action_t action = 1;
inline bool topic_response::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void topic_response::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void topic_response::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void topic_response::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::newsfeed::proto::topic_action_t topic_response::action() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.topic_response.action)
  return static_cast< ::newsfeed::proto::topic_action_t >(action_);
}
inline void topic_response::set_action(::newsfeed::proto::topic_action_t value) {
  assert(::newsfeed::proto::topic_action_t_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:newsfeed.proto.topic_response.action)
}

// required .newsfeed.proto.global_error_t error = 2;
inline bool topic_response::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void topic_response::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void topic_response::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void topic_response::clear_error() {
  error_ = 1;
  clear_has_error();
}
inline ::newsfeed::proto::global_error_t topic_response::error() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.topic_response.error)
  return static_cast< ::newsfeed::proto::global_error_t >(error_);
}
inline void topic_response::set_error(::newsfeed::proto::global_error_t value) {
  assert(::newsfeed::proto::global_error_t_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:newsfeed.proto.topic_response.error)
}

// -------------------------------------------------------------------

// post_news_request

// required string news = 1;
inline bool post_news_request::has_news() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void post_news_request::set_has_news() {
  _has_bits_[0] |= 0x00000001u;
}
inline void post_news_request::clear_has_news() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void post_news_request::clear_news() {
  news_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_news();
}
inline const ::std::string& post_news_request::news() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.post_news_request.news)
  return news_.GetNoArena();
}
inline void post_news_request::set_news(const ::std::string& value) {
  set_has_news();
  news_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:newsfeed.proto.post_news_request.news)
}
#if LANG_CXX11
inline void post_news_request::set_news(::std::string&& value) {
  set_has_news();
  news_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:newsfeed.proto.post_news_request.news)
}
#endif
inline void post_news_request::set_news(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_news();
  news_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:newsfeed.proto.post_news_request.news)
}
inline void post_news_request::set_news(const char* value, size_t size) {
  set_has_news();
  news_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:newsfeed.proto.post_news_request.news)
}
inline ::std::string* post_news_request::mutable_news() {
  set_has_news();
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.post_news_request.news)
  return news_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* post_news_request::release_news() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.post_news_request.news)
  clear_has_news();
  return news_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void post_news_request::set_allocated_news(::std::string* news) {
  if (news != NULL) {
    set_has_news();
  } else {
    clear_has_news();
  }
  news_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), news);
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.post_news_request.news)
}

// -------------------------------------------------------------------

// post_news_response

// required .newsfeed.proto.global_error_t error = 1;
inline bool post_news_response::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void post_news_response::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void post_news_response::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void post_news_response::clear_error() {
  error_ = 1;
  clear_has_error();
}
inline ::newsfeed::proto::global_error_t post_news_response::error() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.post_news_response.error)
  return static_cast< ::newsfeed::proto::global_error_t >(error_);
}
inline void post_news_response::set_error(::newsfeed::proto::global_error_t value) {
  assert(::newsfeed::proto::global_error_t_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:newsfeed.proto.post_news_response.error)
}

// -------------------------------------------------------------------

// news

// required string data = 1;
inline bool news::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void news::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void news::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void news::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& news::data() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.news.data)
  return data_.GetNoArena();
}
inline void news::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:newsfeed.proto.news.data)
}
#if LANG_CXX11
inline void news::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:newsfeed.proto.news.data)
}
#endif
inline void news::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:newsfeed.proto.news.data)
}
inline void news::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:newsfeed.proto.news.data)
}
inline ::std::string* news::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.news.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* news::release_data() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.news.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void news::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.news.data)
}

// -------------------------------------------------------------------

// req_envelope

// required .newsfeed.proto.req_envelope.msg_type type = 1;
inline bool req_envelope::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void req_envelope::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void req_envelope::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void req_envelope::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::newsfeed::proto::req_envelope_msg_type req_envelope::type() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.req_envelope.type)
  return static_cast< ::newsfeed::proto::req_envelope_msg_type >(type_);
}
inline void req_envelope::set_type(::newsfeed::proto::req_envelope_msg_type value) {
  assert(::newsfeed::proto::req_envelope_msg_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:newsfeed.proto.req_envelope.type)
}

// optional .newsfeed.proto.register_request reg_req = 2;
inline bool req_envelope::has_reg_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void req_envelope::set_has_reg_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void req_envelope::clear_has_reg_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void req_envelope::clear_reg_req() {
  if (reg_req_ != NULL) reg_req_->::newsfeed::proto::register_request::Clear();
  clear_has_reg_req();
}
inline const ::newsfeed::proto::register_request& req_envelope::reg_req() const {
  const ::newsfeed::proto::register_request* p = reg_req_;
  // @@protoc_insertion_point(field_get:newsfeed.proto.req_envelope.reg_req)
  return p != NULL ? *p : *reinterpret_cast<const ::newsfeed::proto::register_request*>(
      &::newsfeed::proto::_register_request_default_instance_);
}
inline ::newsfeed::proto::register_request* req_envelope::mutable_reg_req() {
  set_has_reg_req();
  if (reg_req_ == NULL) {
    reg_req_ = new ::newsfeed::proto::register_request;
  }
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.req_envelope.reg_req)
  return reg_req_;
}
inline ::newsfeed::proto::register_request* req_envelope::release_reg_req() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.req_envelope.reg_req)
  clear_has_reg_req();
  ::newsfeed::proto::register_request* temp = reg_req_;
  reg_req_ = NULL;
  return temp;
}
inline void req_envelope::set_allocated_reg_req(::newsfeed::proto::register_request* reg_req) {
  delete reg_req_;
  reg_req_ = reg_req;
  if (reg_req) {
    set_has_reg_req();
  } else {
    clear_has_reg_req();
  }
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.req_envelope.reg_req)
}

// optional .newsfeed.proto.register_response reg_resp = 3;
inline bool req_envelope::has_reg_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void req_envelope::set_has_reg_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void req_envelope::clear_has_reg_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void req_envelope::clear_reg_resp() {
  if (reg_resp_ != NULL) reg_resp_->::newsfeed::proto::register_response::Clear();
  clear_has_reg_resp();
}
inline const ::newsfeed::proto::register_response& req_envelope::reg_resp() const {
  const ::newsfeed::proto::register_response* p = reg_resp_;
  // @@protoc_insertion_point(field_get:newsfeed.proto.req_envelope.reg_resp)
  return p != NULL ? *p : *reinterpret_cast<const ::newsfeed::proto::register_response*>(
      &::newsfeed::proto::_register_response_default_instance_);
}
inline ::newsfeed::proto::register_response* req_envelope::mutable_reg_resp() {
  set_has_reg_resp();
  if (reg_resp_ == NULL) {
    reg_resp_ = new ::newsfeed::proto::register_response;
  }
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.req_envelope.reg_resp)
  return reg_resp_;
}
inline ::newsfeed::proto::register_response* req_envelope::release_reg_resp() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.req_envelope.reg_resp)
  clear_has_reg_resp();
  ::newsfeed::proto::register_response* temp = reg_resp_;
  reg_resp_ = NULL;
  return temp;
}
inline void req_envelope::set_allocated_reg_resp(::newsfeed::proto::register_response* reg_resp) {
  delete reg_resp_;
  reg_resp_ = reg_resp;
  if (reg_resp) {
    set_has_reg_resp();
  } else {
    clear_has_reg_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.req_envelope.reg_resp)
}

// optional .newsfeed.proto.topic_request topic_req = 4;
inline bool req_envelope::has_topic_req() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void req_envelope::set_has_topic_req() {
  _has_bits_[0] |= 0x00000004u;
}
inline void req_envelope::clear_has_topic_req() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void req_envelope::clear_topic_req() {
  if (topic_req_ != NULL) topic_req_->::newsfeed::proto::topic_request::Clear();
  clear_has_topic_req();
}
inline const ::newsfeed::proto::topic_request& req_envelope::topic_req() const {
  const ::newsfeed::proto::topic_request* p = topic_req_;
  // @@protoc_insertion_point(field_get:newsfeed.proto.req_envelope.topic_req)
  return p != NULL ? *p : *reinterpret_cast<const ::newsfeed::proto::topic_request*>(
      &::newsfeed::proto::_topic_request_default_instance_);
}
inline ::newsfeed::proto::topic_request* req_envelope::mutable_topic_req() {
  set_has_topic_req();
  if (topic_req_ == NULL) {
    topic_req_ = new ::newsfeed::proto::topic_request;
  }
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.req_envelope.topic_req)
  return topic_req_;
}
inline ::newsfeed::proto::topic_request* req_envelope::release_topic_req() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.req_envelope.topic_req)
  clear_has_topic_req();
  ::newsfeed::proto::topic_request* temp = topic_req_;
  topic_req_ = NULL;
  return temp;
}
inline void req_envelope::set_allocated_topic_req(::newsfeed::proto::topic_request* topic_req) {
  delete topic_req_;
  topic_req_ = topic_req;
  if (topic_req) {
    set_has_topic_req();
  } else {
    clear_has_topic_req();
  }
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.req_envelope.topic_req)
}

// optional .newsfeed.proto.topic_response topic_resp = 5;
inline bool req_envelope::has_topic_resp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void req_envelope::set_has_topic_resp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void req_envelope::clear_has_topic_resp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void req_envelope::clear_topic_resp() {
  if (topic_resp_ != NULL) topic_resp_->::newsfeed::proto::topic_response::Clear();
  clear_has_topic_resp();
}
inline const ::newsfeed::proto::topic_response& req_envelope::topic_resp() const {
  const ::newsfeed::proto::topic_response* p = topic_resp_;
  // @@protoc_insertion_point(field_get:newsfeed.proto.req_envelope.topic_resp)
  return p != NULL ? *p : *reinterpret_cast<const ::newsfeed::proto::topic_response*>(
      &::newsfeed::proto::_topic_response_default_instance_);
}
inline ::newsfeed::proto::topic_response* req_envelope::mutable_topic_resp() {
  set_has_topic_resp();
  if (topic_resp_ == NULL) {
    topic_resp_ = new ::newsfeed::proto::topic_response;
  }
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.req_envelope.topic_resp)
  return topic_resp_;
}
inline ::newsfeed::proto::topic_response* req_envelope::release_topic_resp() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.req_envelope.topic_resp)
  clear_has_topic_resp();
  ::newsfeed::proto::topic_response* temp = topic_resp_;
  topic_resp_ = NULL;
  return temp;
}
inline void req_envelope::set_allocated_topic_resp(::newsfeed::proto::topic_response* topic_resp) {
  delete topic_resp_;
  topic_resp_ = topic_resp;
  if (topic_resp) {
    set_has_topic_resp();
  } else {
    clear_has_topic_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.req_envelope.topic_resp)
}

// optional .newsfeed.proto.post_news_request post_req = 6;
inline bool req_envelope::has_post_req() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void req_envelope::set_has_post_req() {
  _has_bits_[0] |= 0x00000010u;
}
inline void req_envelope::clear_has_post_req() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void req_envelope::clear_post_req() {
  if (post_req_ != NULL) post_req_->::newsfeed::proto::post_news_request::Clear();
  clear_has_post_req();
}
inline const ::newsfeed::proto::post_news_request& req_envelope::post_req() const {
  const ::newsfeed::proto::post_news_request* p = post_req_;
  // @@protoc_insertion_point(field_get:newsfeed.proto.req_envelope.post_req)
  return p != NULL ? *p : *reinterpret_cast<const ::newsfeed::proto::post_news_request*>(
      &::newsfeed::proto::_post_news_request_default_instance_);
}
inline ::newsfeed::proto::post_news_request* req_envelope::mutable_post_req() {
  set_has_post_req();
  if (post_req_ == NULL) {
    post_req_ = new ::newsfeed::proto::post_news_request;
  }
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.req_envelope.post_req)
  return post_req_;
}
inline ::newsfeed::proto::post_news_request* req_envelope::release_post_req() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.req_envelope.post_req)
  clear_has_post_req();
  ::newsfeed::proto::post_news_request* temp = post_req_;
  post_req_ = NULL;
  return temp;
}
inline void req_envelope::set_allocated_post_req(::newsfeed::proto::post_news_request* post_req) {
  delete post_req_;
  post_req_ = post_req;
  if (post_req) {
    set_has_post_req();
  } else {
    clear_has_post_req();
  }
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.req_envelope.post_req)
}

// optional .newsfeed.proto.post_news_response post_resp = 7;
inline bool req_envelope::has_post_resp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void req_envelope::set_has_post_resp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void req_envelope::clear_has_post_resp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void req_envelope::clear_post_resp() {
  if (post_resp_ != NULL) post_resp_->::newsfeed::proto::post_news_response::Clear();
  clear_has_post_resp();
}
inline const ::newsfeed::proto::post_news_response& req_envelope::post_resp() const {
  const ::newsfeed::proto::post_news_response* p = post_resp_;
  // @@protoc_insertion_point(field_get:newsfeed.proto.req_envelope.post_resp)
  return p != NULL ? *p : *reinterpret_cast<const ::newsfeed::proto::post_news_response*>(
      &::newsfeed::proto::_post_news_response_default_instance_);
}
inline ::newsfeed::proto::post_news_response* req_envelope::mutable_post_resp() {
  set_has_post_resp();
  if (post_resp_ == NULL) {
    post_resp_ = new ::newsfeed::proto::post_news_response;
  }
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.req_envelope.post_resp)
  return post_resp_;
}
inline ::newsfeed::proto::post_news_response* req_envelope::release_post_resp() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.req_envelope.post_resp)
  clear_has_post_resp();
  ::newsfeed::proto::post_news_response* temp = post_resp_;
  post_resp_ = NULL;
  return temp;
}
inline void req_envelope::set_allocated_post_resp(::newsfeed::proto::post_news_response* post_resp) {
  delete post_resp_;
  post_resp_ = post_resp;
  if (post_resp) {
    set_has_post_resp();
  } else {
    clear_has_post_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.req_envelope.post_resp)
}

// optional .newsfeed.proto.news news_data = 8;
inline bool req_envelope::has_news_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void req_envelope::set_has_news_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void req_envelope::clear_has_news_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void req_envelope::clear_news_data() {
  if (news_data_ != NULL) news_data_->::newsfeed::proto::news::Clear();
  clear_has_news_data();
}
inline const ::newsfeed::proto::news& req_envelope::news_data() const {
  const ::newsfeed::proto::news* p = news_data_;
  // @@protoc_insertion_point(field_get:newsfeed.proto.req_envelope.news_data)
  return p != NULL ? *p : *reinterpret_cast<const ::newsfeed::proto::news*>(
      &::newsfeed::proto::_news_default_instance_);
}
inline ::newsfeed::proto::news* req_envelope::mutable_news_data() {
  set_has_news_data();
  if (news_data_ == NULL) {
    news_data_ = new ::newsfeed::proto::news;
  }
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.req_envelope.news_data)
  return news_data_;
}
inline ::newsfeed::proto::news* req_envelope::release_news_data() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.req_envelope.news_data)
  clear_has_news_data();
  ::newsfeed::proto::news* temp = news_data_;
  news_data_ = NULL;
  return temp;
}
inline void req_envelope::set_allocated_news_data(::newsfeed::proto::news* news_data) {
  delete news_data_;
  news_data_ = news_data;
  if (news_data) {
    set_has_news_data();
  } else {
    clear_has_news_data();
  }
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.req_envelope.news_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace newsfeed

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::newsfeed::proto::req_envelope_msg_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::newsfeed::proto::req_envelope_msg_type>() {
  return ::newsfeed::proto::req_envelope_msg_type_descriptor();
}
template <> struct is_proto_enum< ::newsfeed::proto::topic_action_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::newsfeed::proto::topic_action_t>() {
  return ::newsfeed::proto::topic_action_t_descriptor();
}
template <> struct is_proto_enum< ::newsfeed::proto::global_error_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::newsfeed::proto::global_error_t>() {
  return ::newsfeed::proto::global_error_t_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_newsfeed_5fmessages_2eproto__INCLUDED
