// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: newsfeed_messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "newsfeed_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace newsfeed {
namespace proto {
class register_requestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<register_request>
     _instance;
} _register_request_default_instance_;
class register_responseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<register_response>
     _instance;
} _register_response_default_instance_;
class topic_requestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<topic_request>
     _instance;
} _topic_request_default_instance_;
class topic_responseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<topic_response>
     _instance;
} _topic_response_default_instance_;
class post_news_requestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<post_news_request>
     _instance;
} _post_news_request_default_instance_;
class post_news_responseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<post_news_response>
     _instance;
} _post_news_response_default_instance_;
class newsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<news>
     _instance;
} _news_default_instance_;
class req_envelopeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<req_envelope>
     _instance;
} _req_envelope_default_instance_;

namespace protobuf_newsfeed_5fmessages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_request, userid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_response, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_response, topic_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topic_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topic_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topic_request, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topic_request, topic_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topic_response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topic_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topic_response, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topic_response, error_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_news_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_news_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_news_request, news_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_news_response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_news_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(post_news_response, error_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(news, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(news, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(news, data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_envelope, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_envelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_envelope, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_envelope, reg_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_envelope, reg_resp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_envelope, topic_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_envelope, topic_resp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_envelope, post_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_envelope, post_resp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_envelope, news_data_),
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(register_request)},
  { 7, 14, sizeof(register_response)},
  { 16, 23, sizeof(topic_request)},
  { 25, 32, sizeof(topic_response)},
  { 34, 40, sizeof(post_news_request)},
  { 41, 47, sizeof(post_news_response)},
  { 48, 54, sizeof(news)},
  { 55, 68, sizeof(req_envelope)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_register_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_register_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_topic_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_topic_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_post_news_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_post_news_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_news_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_req_envelope_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "newsfeed_messages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _register_request_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_register_request_default_instance_);_register_response_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_register_response_default_instance_);_topic_request_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_topic_request_default_instance_);_topic_response_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_topic_response_default_instance_);_post_news_request_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_post_news_request_default_instance_);_post_news_response_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_post_news_response_default_instance_);_news_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_news_default_instance_);_req_envelope_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_req_envelope_default_instance_);_req_envelope_default_instance_._instance.get_mutable()->reg_req_ = const_cast< ::newsfeed::proto::register_request*>(
      ::newsfeed::proto::register_request::internal_default_instance());
  _req_envelope_default_instance_._instance.get_mutable()->reg_resp_ = const_cast< ::newsfeed::proto::register_response*>(
      ::newsfeed::proto::register_response::internal_default_instance());
  _req_envelope_default_instance_._instance.get_mutable()->topic_req_ = const_cast< ::newsfeed::proto::topic_request*>(
      ::newsfeed::proto::topic_request::internal_default_instance());
  _req_envelope_default_instance_._instance.get_mutable()->topic_resp_ = const_cast< ::newsfeed::proto::topic_response*>(
      ::newsfeed::proto::topic_response::internal_default_instance());
  _req_envelope_default_instance_._instance.get_mutable()->post_req_ = const_cast< ::newsfeed::proto::post_news_request*>(
      ::newsfeed::proto::post_news_request::internal_default_instance());
  _req_envelope_default_instance_._instance.get_mutable()->post_resp_ = const_cast< ::newsfeed::proto::post_news_response*>(
      ::newsfeed::proto::post_news_response::internal_default_instance());
  _req_envelope_default_instance_._instance.get_mutable()->news_data_ = const_cast< ::newsfeed::proto::news*>(
      ::newsfeed::proto::news::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027newsfeed_messages.proto\022\016newsfeed.prot"
      "o\"\"\n\020register_request\022\016\n\006userid\030\001 \002(\t\"Q\n"
      "\021register_response\022-\n\005error\030\001 \002(\0162\036.news"
      "feed.proto.global_error_t\022\r\n\005topic\030\002 \001(\t"
      "\"N\n\rtopic_request\022.\n\006action\030\001 \002(\0162\036.news"
      "feed.proto.topic_action_t\022\r\n\005topic\030\002 \002(\t"
      "\"o\n\016topic_response\022.\n\006action\030\001 \002(\0162\036.new"
      "sfeed.proto.topic_action_t\022-\n\005error\030\002 \002("
      "\0162\036.newsfeed.proto.global_error_t\"!\n\021pos"
      "t_news_request\022\014\n\004news\030\001 \002(\t\"C\n\022post_new"
      "s_response\022-\n\005error\030\001 \002(\0162\036.newsfeed.pro"
      "to.global_error_t\"\024\n\004news\022\014\n\004data\030\001 \002(\t\""
      "\316\004\n\014req_envelope\0223\n\004type\030\001 \002(\0162%.newsfee"
      "d.proto.req_envelope.msg_type\0221\n\007reg_req"
      "\030\002 \001(\0132 .newsfeed.proto.register_request"
      "\0223\n\010reg_resp\030\003 \001(\0132!.newsfeed.proto.regi"
      "ster_response\0220\n\ttopic_req\030\004 \001(\0132\035.newsf"
      "eed.proto.topic_request\0222\n\ntopic_resp\030\005 "
      "\001(\0132\036.newsfeed.proto.topic_response\0223\n\010p"
      "ost_req\030\006 \001(\0132!.newsfeed.proto.post_news"
      "_request\0225\n\tpost_resp\030\007 \001(\0132\".newsfeed.p"
      "roto.post_news_response\022\'\n\tnews_data\030\010 \001"
      "(\0132\024.newsfeed.proto.news\"\245\001\n\010msg_type\022\026\n"
      "\022register_request_t\020\001\022\027\n\023register_respon"
      "se_t\020\002\022\023\n\017topic_request_t\020\003\022\024\n\020topic_res"
      "ponse_t\020\004\022\027\n\023post_news_request_t\020\005\022\030\n\024po"
      "st_news_response_t\020\006\022\n\n\006news_t\020\007*0\n\016topi"
      "c_action_t\022\r\n\tsubscribe\020\001\022\017\n\013unsubscribe"
      "\020\002*:\n\016global_error_t\022\006\n\002ok\020\001\022\022\n\016not_regi"
      "stered\020\002\022\014\n\010internal\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1182);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "newsfeed_messages.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_newsfeed_5fmessages_2eproto

const ::google::protobuf::EnumDescriptor* req_envelope_msg_type_descriptor() {
  protobuf_newsfeed_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_newsfeed_5fmessages_2eproto::file_level_enum_descriptors[0];
}
bool req_envelope_msg_type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const req_envelope_msg_type req_envelope::register_request_t;
const req_envelope_msg_type req_envelope::register_response_t;
const req_envelope_msg_type req_envelope::topic_request_t;
const req_envelope_msg_type req_envelope::topic_response_t;
const req_envelope_msg_type req_envelope::post_news_request_t;
const req_envelope_msg_type req_envelope::post_news_response_t;
const req_envelope_msg_type req_envelope::news_t;
const req_envelope_msg_type req_envelope::msg_type_MIN;
const req_envelope_msg_type req_envelope::msg_type_MAX;
const int req_envelope::msg_type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* topic_action_t_descriptor() {
  protobuf_newsfeed_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_newsfeed_5fmessages_2eproto::file_level_enum_descriptors[1];
}
bool topic_action_t_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* global_error_t_descriptor() {
  protobuf_newsfeed_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_newsfeed_5fmessages_2eproto::file_level_enum_descriptors[2];
}
bool global_error_t_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int register_request::kUseridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

register_request::register_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_newsfeed_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:newsfeed.proto.register_request)
}
register_request::register_request(const register_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  // @@protoc_insertion_point(copy_constructor:newsfeed.proto.register_request)
}

void register_request::SharedCtor() {
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

register_request::~register_request() {
  // @@protoc_insertion_point(destructor:newsfeed.proto.register_request)
  SharedDtor();
}

void register_request::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void register_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* register_request::descriptor() {
  protobuf_newsfeed_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_newsfeed_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const register_request& register_request::default_instance() {
  protobuf_newsfeed_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

register_request* register_request::New(::google::protobuf::Arena* arena) const {
  register_request* n = new register_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void register_request::Clear() {
// @@protoc_insertion_point(message_clear_start:newsfeed.proto.register_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_userid()) {
    GOOGLE_DCHECK(!userid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*userid_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool register_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:newsfeed.proto.register_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), static_cast<int>(this->userid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newsfeed.proto.register_request.userid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:newsfeed.proto.register_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:newsfeed.proto.register_request)
  return false;
#undef DO_
}

void register_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:newsfeed.proto.register_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newsfeed.proto.register_request.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:newsfeed.proto.register_request)
}

::google::protobuf::uint8* register_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:newsfeed.proto.register_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newsfeed.proto.register_request.userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newsfeed.proto.register_request)
  return target;
}

size_t register_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newsfeed.proto.register_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string userid = 1;
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void register_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:newsfeed.proto.register_request)
  GOOGLE_DCHECK_NE(&from, this);
  const register_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const register_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:newsfeed.proto.register_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:newsfeed.proto.register_request)
    MergeFrom(*source);
  }
}

void register_request::MergeFrom(const register_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newsfeed.proto.register_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_userid()) {
    set_has_userid();
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void register_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:newsfeed.proto.register_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void register_request::CopyFrom(const register_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newsfeed.proto.register_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool register_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void register_request::Swap(register_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void register_request::InternalSwap(register_request* other) {
  using std::swap;
  userid_.Swap(&other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata register_request::GetMetadata() const {
  protobuf_newsfeed_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_newsfeed_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// register_request

// required string userid = 1;
bool register_request::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void register_request::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void register_request::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void register_request::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
const ::std::string& register_request::userid() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.register_request.userid)
  return userid_.GetNoArena();
}
void register_request::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:newsfeed.proto.register_request.userid)
}
#if LANG_CXX11
void register_request::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:newsfeed.proto.register_request.userid)
}
#endif
void register_request::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:newsfeed.proto.register_request.userid)
}
void register_request::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:newsfeed.proto.register_request.userid)
}
::std::string* register_request::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.register_request.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* register_request::release_userid() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.register_request.userid)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void register_request::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.register_request.userid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int register_response::kErrorFieldNumber;
const int register_response::kTopicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

register_response::register_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_newsfeed_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:newsfeed.proto.register_response)
}
register_response::register_response(const register_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_topic()) {
    topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:newsfeed.proto.register_response)
}

void register_response::SharedCtor() {
  _cached_size_ = 0;
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = 1;
}

register_response::~register_response() {
  // @@protoc_insertion_point(destructor:newsfeed.proto.register_response)
  SharedDtor();
}

void register_response::SharedDtor() {
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void register_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* register_response::descriptor() {
  protobuf_newsfeed_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_newsfeed_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const register_response& register_response::default_instance() {
  protobuf_newsfeed_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

register_response* register_response::New(::google::protobuf::Arena* arena) const {
  register_response* n = new register_response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void register_response::Clear() {
// @@protoc_insertion_point(message_clear_start:newsfeed.proto.register_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!topic_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*topic_.UnsafeRawStringPointer())->clear();
    }
    error_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool register_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:newsfeed.proto.register_response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .newsfeed.proto.global_error_t error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::newsfeed::proto::global_error_t_IsValid(value)) {
            set_error(static_cast< ::newsfeed::proto::global_error_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string topic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newsfeed.proto.register_response.topic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:newsfeed.proto.register_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:newsfeed.proto.register_response)
  return false;
#undef DO_
}

void register_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:newsfeed.proto.register_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .newsfeed.proto.global_error_t error = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  // optional string topic = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newsfeed.proto.register_response.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:newsfeed.proto.register_response)
}

::google::protobuf::uint8* register_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:newsfeed.proto.register_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .newsfeed.proto.global_error_t error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error(), target);
  }

  // optional string topic = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newsfeed.proto.register_response.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newsfeed.proto.register_response)
  return target;
}

size_t register_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newsfeed.proto.register_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .newsfeed.proto.global_error_t error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }
  // optional string topic = 2;
  if (has_topic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void register_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:newsfeed.proto.register_response)
  GOOGLE_DCHECK_NE(&from, this);
  const register_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const register_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:newsfeed.proto.register_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:newsfeed.proto.register_response)
    MergeFrom(*source);
  }
}

void register_response::MergeFrom(const register_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newsfeed.proto.register_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_topic();
      topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
    }
    if (cached_has_bits & 0x00000002u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void register_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:newsfeed.proto.register_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void register_response::CopyFrom(const register_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newsfeed.proto.register_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool register_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void register_response::Swap(register_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void register_response::InternalSwap(register_response* other) {
  using std::swap;
  topic_.Swap(&other->topic_);
  swap(error_, other->error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata register_response::GetMetadata() const {
  protobuf_newsfeed_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_newsfeed_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// register_response

// required .newsfeed.proto.global_error_t error = 1;
bool register_response::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void register_response::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
void register_response::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void register_response::clear_error() {
  error_ = 1;
  clear_has_error();
}
::newsfeed::proto::global_error_t register_response::error() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.register_response.error)
  return static_cast< ::newsfeed::proto::global_error_t >(error_);
}
void register_response::set_error(::newsfeed::proto::global_error_t value) {
  assert(::newsfeed::proto::global_error_t_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:newsfeed.proto.register_response.error)
}

// optional string topic = 2;
bool register_response::has_topic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void register_response::set_has_topic() {
  _has_bits_[0] |= 0x00000001u;
}
void register_response::clear_has_topic() {
  _has_bits_[0] &= ~0x00000001u;
}
void register_response::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topic();
}
const ::std::string& register_response::topic() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.register_response.topic)
  return topic_.GetNoArena();
}
void register_response::set_topic(const ::std::string& value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:newsfeed.proto.register_response.topic)
}
#if LANG_CXX11
void register_response::set_topic(::std::string&& value) {
  set_has_topic();
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:newsfeed.proto.register_response.topic)
}
#endif
void register_response::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:newsfeed.proto.register_response.topic)
}
void register_response::set_topic(const char* value, size_t size) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:newsfeed.proto.register_response.topic)
}
::std::string* register_response::mutable_topic() {
  set_has_topic();
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.register_response.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* register_response::release_topic() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.register_response.topic)
  clear_has_topic();
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void register_response::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.register_response.topic)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int topic_request::kActionFieldNumber;
const int topic_request::kTopicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

topic_request::topic_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_newsfeed_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:newsfeed.proto.topic_request)
}
topic_request::topic_request(const topic_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_topic()) {
    topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:newsfeed.proto.topic_request)
}

void topic_request::SharedCtor() {
  _cached_size_ = 0;
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_ = 1;
}

topic_request::~topic_request() {
  // @@protoc_insertion_point(destructor:newsfeed.proto.topic_request)
  SharedDtor();
}

void topic_request::SharedDtor() {
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void topic_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* topic_request::descriptor() {
  protobuf_newsfeed_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_newsfeed_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const topic_request& topic_request::default_instance() {
  protobuf_newsfeed_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

topic_request* topic_request::New(::google::protobuf::Arena* arena) const {
  topic_request* n = new topic_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void topic_request::Clear() {
// @@protoc_insertion_point(message_clear_start:newsfeed.proto.topic_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!topic_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*topic_.UnsafeRawStringPointer())->clear();
    }
    action_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool topic_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:newsfeed.proto.topic_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .newsfeed.proto.topic_action_t action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::newsfeed::proto::topic_action_t_IsValid(value)) {
            set_action(static_cast< ::newsfeed::proto::topic_action_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string topic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newsfeed.proto.topic_request.topic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:newsfeed.proto.topic_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:newsfeed.proto.topic_request)
  return false;
#undef DO_
}

void topic_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:newsfeed.proto.topic_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .newsfeed.proto.topic_action_t action = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // required string topic = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newsfeed.proto.topic_request.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:newsfeed.proto.topic_request)
}

::google::protobuf::uint8* topic_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:newsfeed.proto.topic_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .newsfeed.proto.topic_action_t action = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // required string topic = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newsfeed.proto.topic_request.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newsfeed.proto.topic_request)
  return target;
}

size_t topic_request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:newsfeed.proto.topic_request)
  size_t total_size = 0;

  if (has_topic()) {
    // required string topic = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  if (has_action()) {
    // required .newsfeed.proto.topic_action_t action = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  return total_size;
}
size_t topic_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newsfeed.proto.topic_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string topic = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());

    // required .newsfeed.proto.topic_action_t action = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void topic_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:newsfeed.proto.topic_request)
  GOOGLE_DCHECK_NE(&from, this);
  const topic_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const topic_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:newsfeed.proto.topic_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:newsfeed.proto.topic_request)
    MergeFrom(*source);
  }
}

void topic_request::MergeFrom(const topic_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newsfeed.proto.topic_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_topic();
      topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
    }
    if (cached_has_bits & 0x00000002u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void topic_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:newsfeed.proto.topic_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void topic_request::CopyFrom(const topic_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newsfeed.proto.topic_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool topic_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void topic_request::Swap(topic_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void topic_request::InternalSwap(topic_request* other) {
  using std::swap;
  topic_.Swap(&other->topic_);
  swap(action_, other->action_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata topic_request::GetMetadata() const {
  protobuf_newsfeed_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_newsfeed_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// topic_request

// required .newsfeed.proto.topic_action_t action = 1;
bool topic_request::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void topic_request::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
void topic_request::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
void topic_request::clear_action() {
  action_ = 1;
  clear_has_action();
}
::newsfeed::proto::topic_action_t topic_request::action() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.topic_request.action)
  return static_cast< ::newsfeed::proto::topic_action_t >(action_);
}
void topic_request::set_action(::newsfeed::proto::topic_action_t value) {
  assert(::newsfeed::proto::topic_action_t_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:newsfeed.proto.topic_request.action)
}

// required string topic = 2;
bool topic_request::has_topic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void topic_request::set_has_topic() {
  _has_bits_[0] |= 0x00000001u;
}
void topic_request::clear_has_topic() {
  _has_bits_[0] &= ~0x00000001u;
}
void topic_request::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topic();
}
const ::std::string& topic_request::topic() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.topic_request.topic)
  return topic_.GetNoArena();
}
void topic_request::set_topic(const ::std::string& value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:newsfeed.proto.topic_request.topic)
}
#if LANG_CXX11
void topic_request::set_topic(::std::string&& value) {
  set_has_topic();
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:newsfeed.proto.topic_request.topic)
}
#endif
void topic_request::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:newsfeed.proto.topic_request.topic)
}
void topic_request::set_topic(const char* value, size_t size) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:newsfeed.proto.topic_request.topic)
}
::std::string* topic_request::mutable_topic() {
  set_has_topic();
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.topic_request.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* topic_request::release_topic() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.topic_request.topic)
  clear_has_topic();
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void topic_request::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.topic_request.topic)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int topic_response::kActionFieldNumber;
const int topic_response::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

topic_response::topic_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_newsfeed_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:newsfeed.proto.topic_response)
}
topic_response::topic_response(const topic_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&action_, &from.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&action_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:newsfeed.proto.topic_response)
}

void topic_response::SharedCtor() {
  _cached_size_ = 0;
  action_ = 1;
  error_ = 1;
}

topic_response::~topic_response() {
  // @@protoc_insertion_point(destructor:newsfeed.proto.topic_response)
  SharedDtor();
}

void topic_response::SharedDtor() {
}

void topic_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* topic_response::descriptor() {
  protobuf_newsfeed_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_newsfeed_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const topic_response& topic_response::default_instance() {
  protobuf_newsfeed_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

topic_response* topic_response::New(::google::protobuf::Arena* arena) const {
  topic_response* n = new topic_response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void topic_response::Clear() {
// @@protoc_insertion_point(message_clear_start:newsfeed.proto.topic_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    action_ = 1;
    error_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool topic_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:newsfeed.proto.topic_response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .newsfeed.proto.topic_action_t action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::newsfeed::proto::topic_action_t_IsValid(value)) {
            set_action(static_cast< ::newsfeed::proto::topic_action_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .newsfeed.proto.global_error_t error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::newsfeed::proto::global_error_t_IsValid(value)) {
            set_error(static_cast< ::newsfeed::proto::global_error_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:newsfeed.proto.topic_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:newsfeed.proto.topic_response)
  return false;
#undef DO_
}

void topic_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:newsfeed.proto.topic_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .newsfeed.proto.topic_action_t action = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // required .newsfeed.proto.global_error_t error = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:newsfeed.proto.topic_response)
}

::google::protobuf::uint8* topic_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:newsfeed.proto.topic_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .newsfeed.proto.topic_action_t action = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // required .newsfeed.proto.global_error_t error = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newsfeed.proto.topic_response)
  return target;
}

size_t topic_response::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:newsfeed.proto.topic_response)
  size_t total_size = 0;

  if (has_action()) {
    // required .newsfeed.proto.topic_action_t action = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  if (has_error()) {
    // required .newsfeed.proto.global_error_t error = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }

  return total_size;
}
size_t topic_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newsfeed.proto.topic_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .newsfeed.proto.topic_action_t action = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());

    // required .newsfeed.proto.global_error_t error = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void topic_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:newsfeed.proto.topic_response)
  GOOGLE_DCHECK_NE(&from, this);
  const topic_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const topic_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:newsfeed.proto.topic_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:newsfeed.proto.topic_response)
    MergeFrom(*source);
  }
}

void topic_response::MergeFrom(const topic_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newsfeed.proto.topic_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000002u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void topic_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:newsfeed.proto.topic_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void topic_response::CopyFrom(const topic_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newsfeed.proto.topic_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool topic_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void topic_response::Swap(topic_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void topic_response::InternalSwap(topic_response* other) {
  using std::swap;
  swap(action_, other->action_);
  swap(error_, other->error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata topic_response::GetMetadata() const {
  protobuf_newsfeed_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_newsfeed_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// topic_response

// required .newsfeed.proto.topic_action_t action = 1;
bool topic_response::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void topic_response::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
void topic_response::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
void topic_response::clear_action() {
  action_ = 1;
  clear_has_action();
}
::newsfeed::proto::topic_action_t topic_response::action() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.topic_response.action)
  return static_cast< ::newsfeed::proto::topic_action_t >(action_);
}
void topic_response::set_action(::newsfeed::proto::topic_action_t value) {
  assert(::newsfeed::proto::topic_action_t_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:newsfeed.proto.topic_response.action)
}

// required .newsfeed.proto.global_error_t error = 2;
bool topic_response::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void topic_response::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
void topic_response::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void topic_response::clear_error() {
  error_ = 1;
  clear_has_error();
}
::newsfeed::proto::global_error_t topic_response::error() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.topic_response.error)
  return static_cast< ::newsfeed::proto::global_error_t >(error_);
}
void topic_response::set_error(::newsfeed::proto::global_error_t value) {
  assert(::newsfeed::proto::global_error_t_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:newsfeed.proto.topic_response.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int post_news_request::kNewsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

post_news_request::post_news_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_newsfeed_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:newsfeed.proto.post_news_request)
}
post_news_request::post_news_request(const post_news_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  news_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_news()) {
    news_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.news_);
  }
  // @@protoc_insertion_point(copy_constructor:newsfeed.proto.post_news_request)
}

void post_news_request::SharedCtor() {
  _cached_size_ = 0;
  news_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

post_news_request::~post_news_request() {
  // @@protoc_insertion_point(destructor:newsfeed.proto.post_news_request)
  SharedDtor();
}

void post_news_request::SharedDtor() {
  news_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void post_news_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* post_news_request::descriptor() {
  protobuf_newsfeed_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_newsfeed_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const post_news_request& post_news_request::default_instance() {
  protobuf_newsfeed_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

post_news_request* post_news_request::New(::google::protobuf::Arena* arena) const {
  post_news_request* n = new post_news_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void post_news_request::Clear() {
// @@protoc_insertion_point(message_clear_start:newsfeed.proto.post_news_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_news()) {
    GOOGLE_DCHECK(!news_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*news_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool post_news_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:newsfeed.proto.post_news_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string news = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_news()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->news().data(), static_cast<int>(this->news().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newsfeed.proto.post_news_request.news");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:newsfeed.proto.post_news_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:newsfeed.proto.post_news_request)
  return false;
#undef DO_
}

void post_news_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:newsfeed.proto.post_news_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string news = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->news().data(), static_cast<int>(this->news().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newsfeed.proto.post_news_request.news");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->news(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:newsfeed.proto.post_news_request)
}

::google::protobuf::uint8* post_news_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:newsfeed.proto.post_news_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string news = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->news().data(), static_cast<int>(this->news().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newsfeed.proto.post_news_request.news");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->news(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newsfeed.proto.post_news_request)
  return target;
}

size_t post_news_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newsfeed.proto.post_news_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string news = 1;
  if (has_news()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->news());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void post_news_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:newsfeed.proto.post_news_request)
  GOOGLE_DCHECK_NE(&from, this);
  const post_news_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const post_news_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:newsfeed.proto.post_news_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:newsfeed.proto.post_news_request)
    MergeFrom(*source);
  }
}

void post_news_request::MergeFrom(const post_news_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newsfeed.proto.post_news_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_news()) {
    set_has_news();
    news_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.news_);
  }
}

void post_news_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:newsfeed.proto.post_news_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void post_news_request::CopyFrom(const post_news_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newsfeed.proto.post_news_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool post_news_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void post_news_request::Swap(post_news_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void post_news_request::InternalSwap(post_news_request* other) {
  using std::swap;
  news_.Swap(&other->news_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata post_news_request::GetMetadata() const {
  protobuf_newsfeed_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_newsfeed_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// post_news_request

// required string news = 1;
bool post_news_request::has_news() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void post_news_request::set_has_news() {
  _has_bits_[0] |= 0x00000001u;
}
void post_news_request::clear_has_news() {
  _has_bits_[0] &= ~0x00000001u;
}
void post_news_request::clear_news() {
  news_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_news();
}
const ::std::string& post_news_request::news() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.post_news_request.news)
  return news_.GetNoArena();
}
void post_news_request::set_news(const ::std::string& value) {
  set_has_news();
  news_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:newsfeed.proto.post_news_request.news)
}
#if LANG_CXX11
void post_news_request::set_news(::std::string&& value) {
  set_has_news();
  news_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:newsfeed.proto.post_news_request.news)
}
#endif
void post_news_request::set_news(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_news();
  news_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:newsfeed.proto.post_news_request.news)
}
void post_news_request::set_news(const char* value, size_t size) {
  set_has_news();
  news_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:newsfeed.proto.post_news_request.news)
}
::std::string* post_news_request::mutable_news() {
  set_has_news();
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.post_news_request.news)
  return news_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* post_news_request::release_news() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.post_news_request.news)
  clear_has_news();
  return news_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void post_news_request::set_allocated_news(::std::string* news) {
  if (news != NULL) {
    set_has_news();
  } else {
    clear_has_news();
  }
  news_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), news);
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.post_news_request.news)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int post_news_response::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

post_news_response::post_news_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_newsfeed_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:newsfeed.proto.post_news_response)
}
post_news_response::post_news_response(const post_news_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:newsfeed.proto.post_news_response)
}

void post_news_response::SharedCtor() {
  _cached_size_ = 0;
  error_ = 1;
}

post_news_response::~post_news_response() {
  // @@protoc_insertion_point(destructor:newsfeed.proto.post_news_response)
  SharedDtor();
}

void post_news_response::SharedDtor() {
}

void post_news_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* post_news_response::descriptor() {
  protobuf_newsfeed_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_newsfeed_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const post_news_response& post_news_response::default_instance() {
  protobuf_newsfeed_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

post_news_response* post_news_response::New(::google::protobuf::Arena* arena) const {
  post_news_response* n = new post_news_response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void post_news_response::Clear() {
// @@protoc_insertion_point(message_clear_start:newsfeed.proto.post_news_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool post_news_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:newsfeed.proto.post_news_response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .newsfeed.proto.global_error_t error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::newsfeed::proto::global_error_t_IsValid(value)) {
            set_error(static_cast< ::newsfeed::proto::global_error_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:newsfeed.proto.post_news_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:newsfeed.proto.post_news_response)
  return false;
#undef DO_
}

void post_news_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:newsfeed.proto.post_news_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .newsfeed.proto.global_error_t error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:newsfeed.proto.post_news_response)
}

::google::protobuf::uint8* post_news_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:newsfeed.proto.post_news_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .newsfeed.proto.global_error_t error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newsfeed.proto.post_news_response)
  return target;
}

size_t post_news_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newsfeed.proto.post_news_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .newsfeed.proto.global_error_t error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void post_news_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:newsfeed.proto.post_news_response)
  GOOGLE_DCHECK_NE(&from, this);
  const post_news_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const post_news_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:newsfeed.proto.post_news_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:newsfeed.proto.post_news_response)
    MergeFrom(*source);
  }
}

void post_news_response::MergeFrom(const post_news_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newsfeed.proto.post_news_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    set_error(from.error());
  }
}

void post_news_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:newsfeed.proto.post_news_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void post_news_response::CopyFrom(const post_news_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newsfeed.proto.post_news_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool post_news_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void post_news_response::Swap(post_news_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void post_news_response::InternalSwap(post_news_response* other) {
  using std::swap;
  swap(error_, other->error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata post_news_response::GetMetadata() const {
  protobuf_newsfeed_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_newsfeed_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// post_news_response

// required .newsfeed.proto.global_error_t error = 1;
bool post_news_response::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void post_news_response::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void post_news_response::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void post_news_response::clear_error() {
  error_ = 1;
  clear_has_error();
}
::newsfeed::proto::global_error_t post_news_response::error() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.post_news_response.error)
  return static_cast< ::newsfeed::proto::global_error_t >(error_);
}
void post_news_response::set_error(::newsfeed::proto::global_error_t value) {
  assert(::newsfeed::proto::global_error_t_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:newsfeed.proto.post_news_response.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int news::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

news::news()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_newsfeed_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:newsfeed.proto.news)
}
news::news(const news& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:newsfeed.proto.news)
}

void news::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

news::~news() {
  // @@protoc_insertion_point(destructor:newsfeed.proto.news)
  SharedDtor();
}

void news::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void news::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* news::descriptor() {
  protobuf_newsfeed_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_newsfeed_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const news& news::default_instance() {
  protobuf_newsfeed_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

news* news::New(::google::protobuf::Arena* arena) const {
  news* n = new news;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void news::Clear() {
// @@protoc_insertion_point(message_clear_start:newsfeed.proto.news)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool news::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:newsfeed.proto.news)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newsfeed.proto.news.data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:newsfeed.proto.news)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:newsfeed.proto.news)
  return false;
#undef DO_
}

void news::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:newsfeed.proto.news)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newsfeed.proto.news.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:newsfeed.proto.news)
}

::google::protobuf::uint8* news::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:newsfeed.proto.news)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newsfeed.proto.news.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newsfeed.proto.news)
  return target;
}

size_t news::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newsfeed.proto.news)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void news::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:newsfeed.proto.news)
  GOOGLE_DCHECK_NE(&from, this);
  const news* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const news>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:newsfeed.proto.news)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:newsfeed.proto.news)
    MergeFrom(*source);
  }
}

void news::MergeFrom(const news& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newsfeed.proto.news)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    set_has_data();
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void news::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:newsfeed.proto.news)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void news::CopyFrom(const news& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newsfeed.proto.news)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool news::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void news::Swap(news* other) {
  if (other == this) return;
  InternalSwap(other);
}
void news::InternalSwap(news* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata news::GetMetadata() const {
  protobuf_newsfeed_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_newsfeed_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// news

// required string data = 1;
bool news::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void news::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void news::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void news::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& news::data() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.news.data)
  return data_.GetNoArena();
}
void news::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:newsfeed.proto.news.data)
}
#if LANG_CXX11
void news::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:newsfeed.proto.news.data)
}
#endif
void news::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:newsfeed.proto.news.data)
}
void news::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:newsfeed.proto.news.data)
}
::std::string* news::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.news.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* news::release_data() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.news.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void news::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.news.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_envelope::kTypeFieldNumber;
const int req_envelope::kRegReqFieldNumber;
const int req_envelope::kRegRespFieldNumber;
const int req_envelope::kTopicReqFieldNumber;
const int req_envelope::kTopicRespFieldNumber;
const int req_envelope::kPostReqFieldNumber;
const int req_envelope::kPostRespFieldNumber;
const int req_envelope::kNewsDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_envelope::req_envelope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_newsfeed_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:newsfeed.proto.req_envelope)
}
req_envelope::req_envelope(const req_envelope& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reg_req()) {
    reg_req_ = new ::newsfeed::proto::register_request(*from.reg_req_);
  } else {
    reg_req_ = NULL;
  }
  if (from.has_reg_resp()) {
    reg_resp_ = new ::newsfeed::proto::register_response(*from.reg_resp_);
  } else {
    reg_resp_ = NULL;
  }
  if (from.has_topic_req()) {
    topic_req_ = new ::newsfeed::proto::topic_request(*from.topic_req_);
  } else {
    topic_req_ = NULL;
  }
  if (from.has_topic_resp()) {
    topic_resp_ = new ::newsfeed::proto::topic_response(*from.topic_resp_);
  } else {
    topic_resp_ = NULL;
  }
  if (from.has_post_req()) {
    post_req_ = new ::newsfeed::proto::post_news_request(*from.post_req_);
  } else {
    post_req_ = NULL;
  }
  if (from.has_post_resp()) {
    post_resp_ = new ::newsfeed::proto::post_news_response(*from.post_resp_);
  } else {
    post_resp_ = NULL;
  }
  if (from.has_news_data()) {
    news_data_ = new ::newsfeed::proto::news(*from.news_data_);
  } else {
    news_data_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:newsfeed.proto.req_envelope)
}

void req_envelope::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&reg_req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&news_data_) -
      reinterpret_cast<char*>(&reg_req_)) + sizeof(news_data_));
  type_ = 1;
}

req_envelope::~req_envelope() {
  // @@protoc_insertion_point(destructor:newsfeed.proto.req_envelope)
  SharedDtor();
}

void req_envelope::SharedDtor() {
  if (this != internal_default_instance()) delete reg_req_;
  if (this != internal_default_instance()) delete reg_resp_;
  if (this != internal_default_instance()) delete topic_req_;
  if (this != internal_default_instance()) delete topic_resp_;
  if (this != internal_default_instance()) delete post_req_;
  if (this != internal_default_instance()) delete post_resp_;
  if (this != internal_default_instance()) delete news_data_;
}

void req_envelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_envelope::descriptor() {
  protobuf_newsfeed_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_newsfeed_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_envelope& req_envelope::default_instance() {
  protobuf_newsfeed_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

req_envelope* req_envelope::New(::google::protobuf::Arena* arena) const {
  req_envelope* n = new req_envelope;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_envelope::Clear() {
// @@protoc_insertion_point(message_clear_start:newsfeed.proto.req_envelope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(reg_req_ != NULL);
      reg_req_->::newsfeed::proto::register_request::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(reg_resp_ != NULL);
      reg_resp_->::newsfeed::proto::register_response::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(topic_req_ != NULL);
      topic_req_->::newsfeed::proto::topic_request::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(topic_resp_ != NULL);
      topic_resp_->::newsfeed::proto::topic_response::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(post_req_ != NULL);
      post_req_->::newsfeed::proto::post_news_request::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(post_resp_ != NULL);
      post_resp_->::newsfeed::proto::post_news_response::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(news_data_ != NULL);
      news_data_->::newsfeed::proto::news::Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool req_envelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:newsfeed.proto.req_envelope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .newsfeed.proto.req_envelope.msg_type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::newsfeed::proto::req_envelope_msg_type_IsValid(value)) {
            set_type(static_cast< ::newsfeed::proto::req_envelope_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .newsfeed.proto.register_request reg_req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reg_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .newsfeed.proto.register_response reg_resp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reg_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .newsfeed.proto.topic_request topic_req = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .newsfeed.proto.topic_response topic_resp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .newsfeed.proto.post_news_request post_req = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_post_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .newsfeed.proto.post_news_response post_resp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_post_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .newsfeed.proto.news news_data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_news_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:newsfeed.proto.req_envelope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:newsfeed.proto.req_envelope)
  return false;
#undef DO_
}

void req_envelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:newsfeed.proto.req_envelope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .newsfeed.proto.req_envelope.msg_type type = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .newsfeed.proto.register_request reg_req = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->reg_req_, output);
  }

  // optional .newsfeed.proto.register_response reg_resp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->reg_resp_, output);
  }

  // optional .newsfeed.proto.topic_request topic_req = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->topic_req_, output);
  }

  // optional .newsfeed.proto.topic_response topic_resp = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->topic_resp_, output);
  }

  // optional .newsfeed.proto.post_news_request post_req = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->post_req_, output);
  }

  // optional .newsfeed.proto.post_news_response post_resp = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->post_resp_, output);
  }

  // optional .newsfeed.proto.news news_data = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->news_data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:newsfeed.proto.req_envelope)
}

::google::protobuf::uint8* req_envelope::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:newsfeed.proto.req_envelope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .newsfeed.proto.req_envelope.msg_type type = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .newsfeed.proto.register_request reg_req = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->reg_req_, deterministic, target);
  }

  // optional .newsfeed.proto.register_response reg_resp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->reg_resp_, deterministic, target);
  }

  // optional .newsfeed.proto.topic_request topic_req = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->topic_req_, deterministic, target);
  }

  // optional .newsfeed.proto.topic_response topic_resp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->topic_resp_, deterministic, target);
  }

  // optional .newsfeed.proto.post_news_request post_req = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->post_req_, deterministic, target);
  }

  // optional .newsfeed.proto.post_news_response post_resp = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->post_resp_, deterministic, target);
  }

  // optional .newsfeed.proto.news news_data = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->news_data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newsfeed.proto.req_envelope)
  return target;
}

size_t req_envelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newsfeed.proto.req_envelope)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .newsfeed.proto.req_envelope.msg_type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .newsfeed.proto.register_request reg_req = 2;
    if (has_reg_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reg_req_);
    }

    // optional .newsfeed.proto.register_response reg_resp = 3;
    if (has_reg_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reg_resp_);
    }

    // optional .newsfeed.proto.topic_request topic_req = 4;
    if (has_topic_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->topic_req_);
    }

    // optional .newsfeed.proto.topic_response topic_resp = 5;
    if (has_topic_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->topic_resp_);
    }

    // optional .newsfeed.proto.post_news_request post_req = 6;
    if (has_post_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->post_req_);
    }

    // optional .newsfeed.proto.post_news_response post_resp = 7;
    if (has_post_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->post_resp_);
    }

    // optional .newsfeed.proto.news news_data = 8;
    if (has_news_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->news_data_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_envelope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:newsfeed.proto.req_envelope)
  GOOGLE_DCHECK_NE(&from, this);
  const req_envelope* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_envelope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:newsfeed.proto.req_envelope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:newsfeed.proto.req_envelope)
    MergeFrom(*source);
  }
}

void req_envelope::MergeFrom(const req_envelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newsfeed.proto.req_envelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_reg_req()->::newsfeed::proto::register_request::MergeFrom(from.reg_req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reg_resp()->::newsfeed::proto::register_response::MergeFrom(from.reg_resp());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_topic_req()->::newsfeed::proto::topic_request::MergeFrom(from.topic_req());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_topic_resp()->::newsfeed::proto::topic_response::MergeFrom(from.topic_resp());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_post_req()->::newsfeed::proto::post_news_request::MergeFrom(from.post_req());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_post_resp()->::newsfeed::proto::post_news_response::MergeFrom(from.post_resp());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_news_data()->::newsfeed::proto::news::MergeFrom(from.news_data());
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void req_envelope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:newsfeed.proto.req_envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_envelope::CopyFrom(const req_envelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newsfeed.proto.req_envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_envelope::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000080) != 0x00000080) return false;
  if (has_reg_req()) {
    if (!this->reg_req_->IsInitialized()) return false;
  }
  if (has_reg_resp()) {
    if (!this->reg_resp_->IsInitialized()) return false;
  }
  if (has_topic_req()) {
    if (!this->topic_req_->IsInitialized()) return false;
  }
  if (has_topic_resp()) {
    if (!this->topic_resp_->IsInitialized()) return false;
  }
  if (has_post_req()) {
    if (!this->post_req_->IsInitialized()) return false;
  }
  if (has_post_resp()) {
    if (!this->post_resp_->IsInitialized()) return false;
  }
  if (has_news_data()) {
    if (!this->news_data_->IsInitialized()) return false;
  }
  return true;
}

void req_envelope::Swap(req_envelope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_envelope::InternalSwap(req_envelope* other) {
  using std::swap;
  swap(reg_req_, other->reg_req_);
  swap(reg_resp_, other->reg_resp_);
  swap(topic_req_, other->topic_req_);
  swap(topic_resp_, other->topic_resp_);
  swap(post_req_, other->post_req_);
  swap(post_resp_, other->post_resp_);
  swap(news_data_, other->news_data_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_envelope::GetMetadata() const {
  protobuf_newsfeed_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_newsfeed_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_envelope

// required .newsfeed.proto.req_envelope.msg_type type = 1;
bool req_envelope::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void req_envelope::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
void req_envelope::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void req_envelope::clear_type() {
  type_ = 1;
  clear_has_type();
}
::newsfeed::proto::req_envelope_msg_type req_envelope::type() const {
  // @@protoc_insertion_point(field_get:newsfeed.proto.req_envelope.type)
  return static_cast< ::newsfeed::proto::req_envelope_msg_type >(type_);
}
void req_envelope::set_type(::newsfeed::proto::req_envelope_msg_type value) {
  assert(::newsfeed::proto::req_envelope_msg_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:newsfeed.proto.req_envelope.type)
}

// optional .newsfeed.proto.register_request reg_req = 2;
bool req_envelope::has_reg_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void req_envelope::set_has_reg_req() {
  _has_bits_[0] |= 0x00000001u;
}
void req_envelope::clear_has_reg_req() {
  _has_bits_[0] &= ~0x00000001u;
}
void req_envelope::clear_reg_req() {
  if (reg_req_ != NULL) reg_req_->::newsfeed::proto::register_request::Clear();
  clear_has_reg_req();
}
const ::newsfeed::proto::register_request& req_envelope::reg_req() const {
  const ::newsfeed::proto::register_request* p = reg_req_;
  // @@protoc_insertion_point(field_get:newsfeed.proto.req_envelope.reg_req)
  return p != NULL ? *p : *reinterpret_cast<const ::newsfeed::proto::register_request*>(
      &::newsfeed::proto::_register_request_default_instance_);
}
::newsfeed::proto::register_request* req_envelope::mutable_reg_req() {
  set_has_reg_req();
  if (reg_req_ == NULL) {
    reg_req_ = new ::newsfeed::proto::register_request;
  }
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.req_envelope.reg_req)
  return reg_req_;
}
::newsfeed::proto::register_request* req_envelope::release_reg_req() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.req_envelope.reg_req)
  clear_has_reg_req();
  ::newsfeed::proto::register_request* temp = reg_req_;
  reg_req_ = NULL;
  return temp;
}
void req_envelope::set_allocated_reg_req(::newsfeed::proto::register_request* reg_req) {
  delete reg_req_;
  reg_req_ = reg_req;
  if (reg_req) {
    set_has_reg_req();
  } else {
    clear_has_reg_req();
  }
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.req_envelope.reg_req)
}

// optional .newsfeed.proto.register_response reg_resp = 3;
bool req_envelope::has_reg_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void req_envelope::set_has_reg_resp() {
  _has_bits_[0] |= 0x00000002u;
}
void req_envelope::clear_has_reg_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
void req_envelope::clear_reg_resp() {
  if (reg_resp_ != NULL) reg_resp_->::newsfeed::proto::register_response::Clear();
  clear_has_reg_resp();
}
const ::newsfeed::proto::register_response& req_envelope::reg_resp() const {
  const ::newsfeed::proto::register_response* p = reg_resp_;
  // @@protoc_insertion_point(field_get:newsfeed.proto.req_envelope.reg_resp)
  return p != NULL ? *p : *reinterpret_cast<const ::newsfeed::proto::register_response*>(
      &::newsfeed::proto::_register_response_default_instance_);
}
::newsfeed::proto::register_response* req_envelope::mutable_reg_resp() {
  set_has_reg_resp();
  if (reg_resp_ == NULL) {
    reg_resp_ = new ::newsfeed::proto::register_response;
  }
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.req_envelope.reg_resp)
  return reg_resp_;
}
::newsfeed::proto::register_response* req_envelope::release_reg_resp() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.req_envelope.reg_resp)
  clear_has_reg_resp();
  ::newsfeed::proto::register_response* temp = reg_resp_;
  reg_resp_ = NULL;
  return temp;
}
void req_envelope::set_allocated_reg_resp(::newsfeed::proto::register_response* reg_resp) {
  delete reg_resp_;
  reg_resp_ = reg_resp;
  if (reg_resp) {
    set_has_reg_resp();
  } else {
    clear_has_reg_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.req_envelope.reg_resp)
}

// optional .newsfeed.proto.topic_request topic_req = 4;
bool req_envelope::has_topic_req() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void req_envelope::set_has_topic_req() {
  _has_bits_[0] |= 0x00000004u;
}
void req_envelope::clear_has_topic_req() {
  _has_bits_[0] &= ~0x00000004u;
}
void req_envelope::clear_topic_req() {
  if (topic_req_ != NULL) topic_req_->::newsfeed::proto::topic_request::Clear();
  clear_has_topic_req();
}
const ::newsfeed::proto::topic_request& req_envelope::topic_req() const {
  const ::newsfeed::proto::topic_request* p = topic_req_;
  // @@protoc_insertion_point(field_get:newsfeed.proto.req_envelope.topic_req)
  return p != NULL ? *p : *reinterpret_cast<const ::newsfeed::proto::topic_request*>(
      &::newsfeed::proto::_topic_request_default_instance_);
}
::newsfeed::proto::topic_request* req_envelope::mutable_topic_req() {
  set_has_topic_req();
  if (topic_req_ == NULL) {
    topic_req_ = new ::newsfeed::proto::topic_request;
  }
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.req_envelope.topic_req)
  return topic_req_;
}
::newsfeed::proto::topic_request* req_envelope::release_topic_req() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.req_envelope.topic_req)
  clear_has_topic_req();
  ::newsfeed::proto::topic_request* temp = topic_req_;
  topic_req_ = NULL;
  return temp;
}
void req_envelope::set_allocated_topic_req(::newsfeed::proto::topic_request* topic_req) {
  delete topic_req_;
  topic_req_ = topic_req;
  if (topic_req) {
    set_has_topic_req();
  } else {
    clear_has_topic_req();
  }
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.req_envelope.topic_req)
}

// optional .newsfeed.proto.topic_response topic_resp = 5;
bool req_envelope::has_topic_resp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void req_envelope::set_has_topic_resp() {
  _has_bits_[0] |= 0x00000008u;
}
void req_envelope::clear_has_topic_resp() {
  _has_bits_[0] &= ~0x00000008u;
}
void req_envelope::clear_topic_resp() {
  if (topic_resp_ != NULL) topic_resp_->::newsfeed::proto::topic_response::Clear();
  clear_has_topic_resp();
}
const ::newsfeed::proto::topic_response& req_envelope::topic_resp() const {
  const ::newsfeed::proto::topic_response* p = topic_resp_;
  // @@protoc_insertion_point(field_get:newsfeed.proto.req_envelope.topic_resp)
  return p != NULL ? *p : *reinterpret_cast<const ::newsfeed::proto::topic_response*>(
      &::newsfeed::proto::_topic_response_default_instance_);
}
::newsfeed::proto::topic_response* req_envelope::mutable_topic_resp() {
  set_has_topic_resp();
  if (topic_resp_ == NULL) {
    topic_resp_ = new ::newsfeed::proto::topic_response;
  }
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.req_envelope.topic_resp)
  return topic_resp_;
}
::newsfeed::proto::topic_response* req_envelope::release_topic_resp() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.req_envelope.topic_resp)
  clear_has_topic_resp();
  ::newsfeed::proto::topic_response* temp = topic_resp_;
  topic_resp_ = NULL;
  return temp;
}
void req_envelope::set_allocated_topic_resp(::newsfeed::proto::topic_response* topic_resp) {
  delete topic_resp_;
  topic_resp_ = topic_resp;
  if (topic_resp) {
    set_has_topic_resp();
  } else {
    clear_has_topic_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.req_envelope.topic_resp)
}

// optional .newsfeed.proto.post_news_request post_req = 6;
bool req_envelope::has_post_req() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void req_envelope::set_has_post_req() {
  _has_bits_[0] |= 0x00000010u;
}
void req_envelope::clear_has_post_req() {
  _has_bits_[0] &= ~0x00000010u;
}
void req_envelope::clear_post_req() {
  if (post_req_ != NULL) post_req_->::newsfeed::proto::post_news_request::Clear();
  clear_has_post_req();
}
const ::newsfeed::proto::post_news_request& req_envelope::post_req() const {
  const ::newsfeed::proto::post_news_request* p = post_req_;
  // @@protoc_insertion_point(field_get:newsfeed.proto.req_envelope.post_req)
  return p != NULL ? *p : *reinterpret_cast<const ::newsfeed::proto::post_news_request*>(
      &::newsfeed::proto::_post_news_request_default_instance_);
}
::newsfeed::proto::post_news_request* req_envelope::mutable_post_req() {
  set_has_post_req();
  if (post_req_ == NULL) {
    post_req_ = new ::newsfeed::proto::post_news_request;
  }
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.req_envelope.post_req)
  return post_req_;
}
::newsfeed::proto::post_news_request* req_envelope::release_post_req() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.req_envelope.post_req)
  clear_has_post_req();
  ::newsfeed::proto::post_news_request* temp = post_req_;
  post_req_ = NULL;
  return temp;
}
void req_envelope::set_allocated_post_req(::newsfeed::proto::post_news_request* post_req) {
  delete post_req_;
  post_req_ = post_req;
  if (post_req) {
    set_has_post_req();
  } else {
    clear_has_post_req();
  }
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.req_envelope.post_req)
}

// optional .newsfeed.proto.post_news_response post_resp = 7;
bool req_envelope::has_post_resp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void req_envelope::set_has_post_resp() {
  _has_bits_[0] |= 0x00000020u;
}
void req_envelope::clear_has_post_resp() {
  _has_bits_[0] &= ~0x00000020u;
}
void req_envelope::clear_post_resp() {
  if (post_resp_ != NULL) post_resp_->::newsfeed::proto::post_news_response::Clear();
  clear_has_post_resp();
}
const ::newsfeed::proto::post_news_response& req_envelope::post_resp() const {
  const ::newsfeed::proto::post_news_response* p = post_resp_;
  // @@protoc_insertion_point(field_get:newsfeed.proto.req_envelope.post_resp)
  return p != NULL ? *p : *reinterpret_cast<const ::newsfeed::proto::post_news_response*>(
      &::newsfeed::proto::_post_news_response_default_instance_);
}
::newsfeed::proto::post_news_response* req_envelope::mutable_post_resp() {
  set_has_post_resp();
  if (post_resp_ == NULL) {
    post_resp_ = new ::newsfeed::proto::post_news_response;
  }
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.req_envelope.post_resp)
  return post_resp_;
}
::newsfeed::proto::post_news_response* req_envelope::release_post_resp() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.req_envelope.post_resp)
  clear_has_post_resp();
  ::newsfeed::proto::post_news_response* temp = post_resp_;
  post_resp_ = NULL;
  return temp;
}
void req_envelope::set_allocated_post_resp(::newsfeed::proto::post_news_response* post_resp) {
  delete post_resp_;
  post_resp_ = post_resp;
  if (post_resp) {
    set_has_post_resp();
  } else {
    clear_has_post_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.req_envelope.post_resp)
}

// optional .newsfeed.proto.news news_data = 8;
bool req_envelope::has_news_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void req_envelope::set_has_news_data() {
  _has_bits_[0] |= 0x00000040u;
}
void req_envelope::clear_has_news_data() {
  _has_bits_[0] &= ~0x00000040u;
}
void req_envelope::clear_news_data() {
  if (news_data_ != NULL) news_data_->::newsfeed::proto::news::Clear();
  clear_has_news_data();
}
const ::newsfeed::proto::news& req_envelope::news_data() const {
  const ::newsfeed::proto::news* p = news_data_;
  // @@protoc_insertion_point(field_get:newsfeed.proto.req_envelope.news_data)
  return p != NULL ? *p : *reinterpret_cast<const ::newsfeed::proto::news*>(
      &::newsfeed::proto::_news_default_instance_);
}
::newsfeed::proto::news* req_envelope::mutable_news_data() {
  set_has_news_data();
  if (news_data_ == NULL) {
    news_data_ = new ::newsfeed::proto::news;
  }
  // @@protoc_insertion_point(field_mutable:newsfeed.proto.req_envelope.news_data)
  return news_data_;
}
::newsfeed::proto::news* req_envelope::release_news_data() {
  // @@protoc_insertion_point(field_release:newsfeed.proto.req_envelope.news_data)
  clear_has_news_data();
  ::newsfeed::proto::news* temp = news_data_;
  news_data_ = NULL;
  return temp;
}
void req_envelope::set_allocated_news_data(::newsfeed::proto::news* news_data) {
  delete news_data_;
  news_data_ = news_data;
  if (news_data) {
    set_has_news_data();
  } else {
    clear_has_news_data();
  }
  // @@protoc_insertion_point(field_set_allocated:newsfeed.proto.req_envelope.news_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace newsfeed

// @@protoc_insertion_point(global_scope)
